# Use a Terraform Docker image to ensure the Terraform CLI is available
image: hashicorp/terraform:1.5.0

variables:
  IGNORE_TF_DEPRECATION_WARNING: "true"  # Suppress Terraform template deprecation warnings
  TF_STATE_NAME: "default"
  TF_CACHE_KEY: "default"
  TF_IN_AUTOMATION: "true"               # Indicates Terraform is running in CI/CD

stages:
  - validate
  - plan
  - apply
  - integration-test

before_script:
  # Ensure the required provider is available
  - echo "Setting up Terraform provider..."
  - mkdir -p ~/.terraform.d/plugins/registry.terraform.io/ciscodevnet/iosxe/0.5.6/linux_amd64/
  - unzip -o terraform-provider-iosxe_0.5.6_linux_amd64.zip -d ~/.terraform.d/plugins/registry.terraform.io/ciscodevnet/iosxe/0.5.6/linux_amd64/ # Force overwrite
  - ls -R ~/.terraform.d/plugins/registry.terraform.io/ciscodevnet/iosxe/0.5.6/linux_amd64/


validate:
  stage: validate
  script:
    - terraform init                # Initialize Terraform
    - terraform validate            # Validate Terraform configuration

plan:
  stage: plan
  script:
    - terraform init                # Initialize Terraform
    - terraform plan -out=tfplan    # Generate Terraform execution plan
  artifacts:
    paths:
      - tfplan                      # Store the plan file for use in the apply stage

apply:
  stage: apply
  when: manual                      # Manual approval required before applying
  script:
    - terraform init                # Initialize Terraform
    - terraform apply tfplan        # Apply the generated plan

loopback_test_job:
  stage: integration-test
  script:
    - ./test.sh                     # Run the test.sh script to validate loopbacks

